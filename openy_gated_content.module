<?php

/**
 * @file
 * The openy_gated_content module routines.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function openy_gated_content_theme() {
  return [
    'paragraph__gated_content' => [
      'base hook' => 'paragraph',
      'variables' => [
        'auth_provider_id' => '',
        'auth_configuration' => '',
        'login_url' => '',
      ],
    ],
    'paragraph__gated_content_login' => [
      'base hook' => 'paragraph',
      'variables' => [
        'auth_provider_id' => '',
        'auth_configuration' => '',
        'app_url' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph().
 */
function openy_gated_content_preprocess_paragraph(&$variables) {
  if (!isset($variables['paragraph'])) {
    return;
  }

  if (!in_array($variables['paragraph']->getType(), ['gated_content', 'gated_content_login'])) {
    return;
  }

  if ($variables['paragraph']->getType() === 'gated_content_login') {
    $variables['app_url'] = $variables['paragraph']
      ->field_link_to_gated_content_app->get(0)->getUrl()->toString();
  }

  if ($variables['paragraph']->getType() === 'gated_content') {
    $variables['login_url'] = $variables['paragraph']
      ->field_link_to_login_page->get(0)->getUrl()->toString();
  }

  $variables['#cache']['tags'][] = 'config:openy_gated_content.settings';
  $variables['#cache']['tags'][] = 'config:openy_gc_auth.settings';
  $active_provider = \Drupal::config('openy_gc_auth.settings')->get('active_provider');
  $identityProviderManager = \Drupal::service('plugin.manager.gc_identity_provider');
  $plugin_definition = $identityProviderManager->getDefinition($active_provider, FALSE);
  if (!$plugin_definition) {
    return;
  }
  $plugin_instance = $identityProviderManager->createInstance($active_provider);
  $app_config = \Drupal::config('openy_gated_content.settings')->getOriginal();
  $variables['auth_provider_id'] = $plugin_instance->getId();
  $variables['auth_configuration'] = json_encode($plugin_instance->getDataForApp());
  $variables['app_settings'] = json_encode($app_config);
  $variables['#cache']['tags'][] = 'config:' . $plugin_instance->getConfigName();
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_filter_access().
 *
 * Without this hook there no access to filter by date in
 * JSON API for eventinstance.
 *
 * @see https://www.drupal.org/project/jsonapi/issues/3037519
 */
function openy_gated_content_jsonapi_eventinstance_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  return ([
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowed(),
    JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::allowed(),
    JSONAPI_FILTER_AMONG_OWN => AccessResult::allowed(),
  ]);
}

/**
 * Implements hook_form_alter().
 */
function openy_gated_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $event_series_forms = [
    'eventseries_live_stream_edit_form',
    'eventseries_virtual_meeting_edit_form',
  ];
  if (in_array($form_id, $event_series_forms)) {
    // Disable rebuild form.
    $form['#validate'][] = '_openy_gated_content_form_eventseries_live_stream_validate';
    // We need to clear JSON API cache bin on submit.
    $form['actions']['submit']['#submit'][] = '_openy_gated_content_form_eventseries_live_stream_submit';
  }

  $event_instance_forms = [
    'eventinstance_live_stream_edit_form',
    'eventinstance_virtual_meeting_edit_form',
  ];
  if (in_array($form_id, $event_instance_forms)) {
    // Collapse field_inheritance by default in event instance edit form.
    $form['field_inheritance']['#open'] = FALSE;
  }
}

/**
 * Custom validation for eventseries_live_stream_edit_form.
 */
function _openy_gated_content_form_eventseries_live_stream_validate(&$form, FormStateInterface $form_state) {
  // This will fix entity save, but disable confirmation step
  // on date change.
  $form_state->setRebuild(FALSE);
}

/**
 * Custom submit handler for eventseries_live_stream_edit_form.
 */
function _openy_gated_content_form_eventseries_live_stream_submit(&$form, FormStateInterface $form_state) {
  \Drupal::cache('jsonapi_normalizations')->deleteAll();
}

/**
 * Implements hook_page_attachments().
 */
function openy_gated_content_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'openy_gated_content/styles';
}
